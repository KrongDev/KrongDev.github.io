import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const POSTS_DIR = path.join(__dirname, '../_posts');
const OUTPUT_DIR = path.join(__dirname, '../public/data');
const OUTPUT_POSTS_DIR = path.join(__dirname, '../public/_posts');
const POSTS_META_FILE = path.join(OUTPUT_DIR, 'posts-meta.json');
const CATEGORIES_FILE = path.join(OUTPUT_DIR, 'categories.json');

// Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï (ÏàúÏÑúÏôÄ Ïù¥Î¶Ñ Ï†ïÏùò)
const CATEGORY_CONFIG = [
  { id: 'CS', name: 'Computer Science', icon: 'üíª', description: 'Ïª¥Ìì®ÌÑ∞ Í≥ºÌïô Í∏∞Ï¥à' },
  { id: 'Language', name: 'Programming Language', icon: 'üìù', description: 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ïñ∏Ïñ¥' },
  { id: 'Framework', name: 'Framework', icon: 'üöÄ', description: 'ÌîÑÎ†àÏûÑÏõåÌÅ¨ & ÎùºÏù¥Î∏åÎü¨Î¶¨' },
  { id: 'Database', name: 'Database', icon: 'üóÑÔ∏è', description: 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§' },
  { id: 'Platform', name: 'Platform', icon: '‚òÅÔ∏è', description: 'ÌîåÎû´Ìèº & Ïù∏ÌîÑÎùº' },
  { id: 'Life', name: 'Life', icon: 'üå±', description: 'Í∞úÎ∞ú ÏùºÏÉÅ' },
];

function buildPosts() {
  console.log('üìù Building posts...');

  // _posts Ìè¥ÎçîÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
  if (!fs.existsSync(POSTS_DIR)) {
    fs.mkdirSync(POSTS_DIR, { recursive: true });
    console.log('‚úÖ Created _posts directory');
  }

  // output Ìè¥ÎçîÎì§ ÏÉùÏÑ±
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }
  if (!fs.existsSync(OUTPUT_POSTS_DIR)) {
    fs.mkdirSync(OUTPUT_POSTS_DIR, { recursive: true });
  }

  // _posts Ìè¥ÎçîÏùò Î™®Îì† .md ÌååÏùº ÏùΩÍ∏∞
  const files = fs.readdirSync(POSTS_DIR).filter(file => file.endsWith('.md'));

  if (files.length === 0) {
    console.log('‚ö†Ô∏è  No markdown files found in _posts/');
    // Îπà Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
    fs.writeFileSync(POSTS_META_FILE, JSON.stringify([], null, 2));
    fs.writeFileSync(CATEGORIES_FILE, JSON.stringify([], null, 2));
    console.log('‚úÖ Created empty meta files');
    return;
  }

  // Í∞Å ÌååÏùº ÌååÏã±ÌïòÏó¨ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
  const postsMeta = files.map(filename => {
    const filePath = path.join(POSTS_DIR, filename);
    const fileContent = fs.readFileSync(filePath, 'utf8');
    
    // Front MatterÏôÄ Î≥∏Î¨∏ Î∂ÑÎ¶¨
    const { data, content } = matter(fileContent);

    // ÌååÏùºÎ™ÖÏóêÏÑú slug Ï∂îÏ∂ú
    const slug = filename.replace('.md', '');

    // ÎßàÌÅ¨Îã§Ïö¥ ÌååÏùºÏùÑ public/_posts/Î°ú Î≥µÏÇ¨
    const outputFilePath = path.join(OUTPUT_POSTS_DIR, filename);
    fs.copyFileSync(filePath, outputFilePath);

    // excerptÍ∞Ä ÏóÜÏúºÎ©¥ Î≥∏Î¨∏ÏóêÏÑú Ï∂îÏ∂ú
    let excerpt = data.excerpt || '';
    if (!excerpt) {
      // ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ÌïòÍ≥† Ï≤òÏùå 200Ïûê Ï∂îÏ∂ú
      const plainText = content
        .replace(/^---[\s\S]*?---/, '') // frontmatter Ï†úÍ±∞
        .replace(/#{1,6}\s/g, '') // Ï†úÎ™©
        .replace(/\*\*?/g, '') // bold, italic
        .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1') // ÎßÅÌÅ¨
        .replace(/`{1,3}[^`]*`{1,3}/g, '') // ÏΩîÎìú
        .replace(/\n+/g, ' ') // Í∞úÌñâ
        .trim();
      excerpt = plainText.substring(0, 200) + (plainText.length > 200 ? '...' : '');
    }

    // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Îßå Î∞òÌôò (Î≥∏Î¨∏ Ï†úÏô∏)
    return {
      id: slug,
      slug,
      filename,
      title: data.title || 'Untitled',
      date: data.date || new Date().toISOString().split('T')[0],
      category: data.category || 'uncategorized',
      subcategory: data.subcategory || null,
      tags: data.tags || [],
      excerpt,
      author: data.author || 'Anonymous',
    };
  });

  // ÎÇ†ÏßúÏàú Ï†ïÎ†¨ (ÏµúÏã†Ïàú)
  postsMeta.sort((a, b) => new Date(b.date) - new Date(a.date));

  // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ JSON Ï†ÄÏû•
  fs.writeFileSync(POSTS_META_FILE, JSON.stringify(postsMeta, null, 2));

  console.log(`‚úÖ Built ${postsMeta.length} post(s)`);
  console.log(`üìÅ Posts metadata: ${POSTS_META_FILE}`);
  console.log(`üìÅ Markdown files copied to: ${OUTPUT_POSTS_DIR}`);

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ ÏÉùÏÑ±
  buildCategories(postsMeta);
}

function buildCategories(postsMeta) {
  console.log('\nüìä Building categories...');

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÜµÍ≥Ñ ÏàòÏßë
  const categoryStats = new Map();
  const subcategoryStats = new Map();

  postsMeta.forEach(post => {
    // Î©îÏù∏ Ïπ¥ÌÖåÍ≥†Î¶¨
    const catCount = categoryStats.get(post.category) || 0;
    categoryStats.set(post.category, catCount + 1);

    // ÏÑúÎ∏å Ïπ¥ÌÖåÍ≥†Î¶¨
    if (post.subcategory) {
      const key = `${post.category}:${post.subcategory}`;
      const subCount = subcategoryStats.get(key) || 0;
      subcategoryStats.set(key, subCount + 1);
    }
  });

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
  const categories = CATEGORY_CONFIG.map(config => {
    const count = categoryStats.get(config.id) || 0;
    
    // Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Îì§ ÏàòÏßë
    const subcategories = [];
    subcategoryStats.forEach((count, key) => {
      const [catId, subId] = key.split(':');
      if (catId === config.id) {
        subcategories.push({
          id: subId,
          name: formatCategoryName(subId),
          count,
        });
      }
    });

    // ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î•º Ïù¥Î¶ÑÏàú Ï†ïÎ†¨
    subcategories.sort((a, b) => a.name.localeCompare(b.name));

    return {
      ...config,
      count,
      subcategories: subcategories.length > 0 ? subcategories : undefined,
    };
  });

  // Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÎäî Ïπ¥ÌÖåÍ≥†Î¶¨Îäî ÌëúÏãúÎßå (count: 0)
  const categoriesWithPosts = categories.filter(cat => cat.count > 0 || true);

  // Ïπ¥ÌÖåÍ≥†Î¶¨ JSON Ï†ÄÏû•
  fs.writeFileSync(CATEGORIES_FILE, JSON.stringify(categoriesWithPosts, null, 2));

  console.log(`‚úÖ Built categories`);
  console.log(`üìÅ Categories: ${CATEGORIES_FILE}`);
  
  // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÜµÍ≥Ñ Ï∂úÎ†•
  categories.forEach(cat => {
    if (cat.count > 0) {
      console.log(`   ${cat.icon} ${cat.name}: ${cat.count} posts`);
      if (cat.subcategories) {
        cat.subcategories.forEach(sub => {
          console.log(`      ‚îî‚îÄ ${sub.name}: ${sub.count} posts`);
        });
      }
    }
  });
}

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨ IDÎ•º Î≥¥Í∏∞ Ï¢ãÏùÄ Ïù¥Î¶ÑÏúºÎ°ú Î≥ÄÌôò
 */
function formatCategoryName(id) {
  const nameMap = {
    'Java': 'Java',
    'Python': 'Python',
    'JavaScript': 'JavaScript',
    'TypeScript': 'TypeScript',
    'Go': 'Go',
    'Rust': 'Rust',
    'React': 'React',
    'Vue': 'Vue',
    'Angular': 'Angular',
    'Spring': 'Spring',
    'Django': 'Django',
    'Express': 'Express',
    'MySQL': 'MySQL',
    'PostgreSQL': 'PostgreSQL',
    'MongoDB': 'MongoDB',
    'Redis': 'Redis',
    'Docker': 'Docker',
    'Kubernetes': 'Kubernetes',
    'AWS': 'AWS',
    'GCP': 'GCP',
    'Azure': 'Azure',
  };

  return nameMap[id] || id.charAt(0).toUpperCase() + id.slice(1);
}

// Ïã§Ìñâ
try {
  buildPosts();
} catch (error) {
  console.error('‚ùå Build failed:', error);
  process.exit(1);
}

